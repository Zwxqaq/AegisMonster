1.Servlet简述
Servlet是
  JavaWeb三大组件之一，其余两个为Filter、Listener，属于动态资源
  其用于处理请求，服务器会将接收的请求交给Servlet处理
  每个Servlet都必须实现javax.servlet.Servle t接口
  -->接收请求、处理请求、完成响应
2.常见配置 -->配置于tomcat下 webapps中的项目下
  META-INF
  WEB-INF  -->lib（类库）、classes（java代码）、web.xml（配置文件）
  页面 -->index.html
  访问 协议://域名：端口号/页面
3.http协议
  请求协议和响应协议
  建立请求 --> 发送请求信息 --> 回复响应信息 --> 关闭连接
4.请求格式
  请求行
  请求头 -->键值对、相关信息
  空行
  请求体
5.响应格式
  响应行
  响应头
  空行
  响应体
6.响应状态
  200 成功
  404 页面找不到
  500 内部错误
  302 重定向
  304 请求资源没有改变（刷新没有请求新资源）
  403 权限不足
7.GET
  直接输入网址、点击超链接
  表单提交 method="GET"
  优点：
    标签
  缺点：
    不安全，密码也会显示在地址栏
    地址有大小，最长字符为255字符
8.POST
  method="POST"
  在地址栏中看不到数据传递，放置在请求体中
  优点：
    相对安全
    大小无限制
  缺点：
    不能做标签
9.Servlet程序 三种方式
  实现javax.servlet.Servlet接口
  继承javax.servlet.GenericeServlet
  继承javax.servlet.HttpServlet     ->最方便
10.HelloServlet类实现方法  -->实现接口 javax.servlet.Servlet
  init(ServletConfig) 初始化只有一次，只有在第一次请求或者Servlet容器启动时，才开启
  service(ServletRequest,ServletResponse) 服务，每次请求页面什么的，都会调用
  destroy()
  getServletConfig() 得到Servlet的配置参数
  getServletInfo() 返回Servlet描述信息，比如作者、版本、版权等。
  特点：
    单例、线程不安全（效率高）、Servlet实现类我们写，生命周期管理由Servlet容器负责
  生命周期：
    1..init(Servlet Config)
    2.service(ServletRequest,ServletResponse)
    3.destroy()
  web.xml配置：
    想要直接在路径访问Servlet类是不可能的，必须配置这个文件
    <servlet>  -->标签可以单独存在
        <servlet-name>xxx</servlet-name>
        <servlet-class>net.zwx.HelloServlet</servlet-class>
        <load-on-startup>0</load‐on‐startup>  -->越靠近0越先启动
    </servlet>
    <servlet-mapping>  -->标签不可以单独存在
        <servlet-name>xxx</servlet-name>
        <url-pattern>/hello</url-pattern>
    </servlet-mapping>
11.GenericServlet  -->继承javax.servlet.GenericeServlet
    public class StundetServlet extends GenericServlet {
    @Override    
    public void service(ServletRequest req, ServletResponse res) throws ServletException,
    IOException {
    //获取配置信息        
    ServletConfig servletConfig = this.getServletConfig();        
    String uname = servletConfig.getInitParameter("uname");        
    System.out.println(uname);        
    }    
    }
12.HttpServlet -->继承继承javax.servlet.HttpServlet 
    public class StundetServlet extends HttpServlet{
    @Override    
    public void doPost(HttpServletRequest request, HttpServletResponse response) {    
    System.out.println("xxxxxxxxxxx");        
    }    
    @Override    
    public void doGet(HttpServletRequest request, HttpServletResponse response) {    
    doPost(request,response);        
    }          
    }
13.访问Servlet的顺序
  请求路径
  url pattern标签
  name标签
  servlet-class标签
14.load-on-startup标签作用
  默认Servlet对象创建是在浏览器第一次请求Servlet的时候
  通过load-on-startup标签，让Servlet对象随着Servlet容器启动而启动
    若值为负数，仍然为默认效果，第一次请求时创建
    若大于等于0，值越小，启动优先级越高
15.配置
  1可以只有一个Servlet标签，一般设置随容器启动
  2不可以只有一个Servlet-mapping标签
  3可以一个Servlet对应一个Servlet-mapping标签
  4也可以一个Servlet对应多个Servlet-mapping标签
  5url-pattern只有两种形式：
     (1)/xxx 
     (2)xxx.do
16.web.xml继承性
  <welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <welcome-file>index.htm</welcome-file>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
    在web.xml中如果没有欢迎页面，则继承了tomcat中web.xml配置
17.Servlet中常用接口
  1ServletRequest接口
       参数相关
      String getParameter(String name);
      String[] getParameterValues(String name);
      Enumeration getParameterNames();
      Map<String,String[]> getParameterMap();
      属性相关
      setAttribute(String name,Object value);
      getAttribute(String name);
      removeAttribute(String name);
      Enumeration getAttributeNames();
      //转发
      getRequestDispatcher(String path).forward(req,res);
      //设置请求来的编码格式
      setCharacterEncoding(String encoding);
      HttpServletRequest
      //表单请求的方式get|Post
      String getMethod();
      HttpSession getSession();  //当前session对象，同一个会话    
      String getRequestURL(); //  长路径   http://...
      String getRequestURI(); //  短路径   上下文路径（项目路径）\servlet路径\
      String getServletPath();//  servlet路径
      String getContextPath();//  上下文路径（项目路径）
      String getQueryString();    ?后面的路径
  2ServletResponse接口
      PrintWriter getWriter()  : 获取字符流，可以向浏览器客户端输出内容
      println()  输出内容多了一个空格     
      write()    输出内容      
      ServletOutputStream getOutputStream()   : 获取字节流，可以向浏览器客户端输出字节
      void setCharacterEncoding(String encodign):设置响应编码
      setContentType(java.lang.String type) :设置响应类型
      void sendRedirect("路径")  响应重定向
  3ServletConfig接口
      String getServletName()
      ServletContext getServletContext()
      String getInitiParameter(String name)
      Enumeration getInitParameterNames() -->枚举的接口，有
              while (names.hasMoreElements()) {
              name =names.nextElement();
              out.println(name + " - " + Arrays.toString(request.getParameterValues(name)));
      web.xml中<servlet>下应该添加初始化参数
      <init-param>
            <param-name>uname</param-name>
            <param-value>zs</param-value>
        </init-param>
        <init-param>
            <param-name>upass</param-name>
            <param-value>123</param-value>
        </init-param>
  4ServletContext接口
      WEB程序的大管理，可以从中获取WEB应用的各个信息
      String getInitParameter(java.lang.String name)  根据参数名获取参数值
      Enumeration getInitParameterNames() 获取所有参数名             
      String getRealPath(java.lang.String path)   获取绝对路径      
      String getContextPath(); 获取上下文路径                        
      InputStream getResourceAsStream(java.lang.String path)   获取流
      Set getResourcePaths(java.lang.String path)    获取指定目录下所有资源路径
      属性相关的[略]
18.属性相关操作
      JavaWeb四大域对象
        PageContext 当前页
        ServletRequest 同一个请求
        HttpSession 同一个会话
        ServletContext 同一个应用程序
        常用方法
        void setAttribute(String name,Object value);
        Object getAttribute(String name);
        void removeAttribute(String name);
        Enumeration getAttributeNames();
19.请求转发和重定向
        ServletRequest对象.getRequestDispatcher("/路径").forward(req,res);  -->Dispatcher我理解为调度器
        ServletRequest对象.getRequestDispatcher("/路径").include(req,res);
        ServletResponse对象.sendRedirect("路径");
        但是要注意，转发不能转发到外部的站点
        request.getRequestDispatcher("/WEB-INF/jsp/student.jsp").forward(request, response);
        response.sendRedirect("/WEB-INF/jsp/student.jsp");
        在上面两句话中，可以知道请求是可以请求转发的，但是重定向却无法访问WEB-INF下的内容
20.转发和重定向区别
  相同点：
    都能跳转页面
  不同点：
    转发地址栏不改变，重定向地址栏改变
    转发ServletRequest是同一个对象，重定向ServletResponse是多个对象
    转发 / 代表当前应用根路径， 重定向 / 代表Servlet容器的根路径
    转发只发给当前WEB应用的资源，重定向可以到任何资源
21.RequestDspatcher两个请求转发的方法
    forward -->一去不复返 后面有re
    include -->一去回头
    response.getWriter().println("shutdown?");  只有在回头的才可以打印的出来
             
